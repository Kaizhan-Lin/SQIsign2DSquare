include("level5/prime.jl")
include("level5/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../elliptic_curves/montgomery.jl")
include("../elliptic_curves/pairing.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level5torsion.txt
    P2e = Point(1207940818571880478150371849000856348816661792764600731883260608464991833485925389696282570496555183523084178321613215614787992511551190056893379152972853*Fp2_i + 3712564218761894169482667826722996821236204802451542737415769479856130568095933473089057907529265845607064652165783370167138590264964513128791098969701216, 1122756852865896010909661508374437498775215878038098030052598098420481596989621320142906894866301447954083341918657658909404343978043062196639464603928031*Fp2_i + 2648295334653967223396375756748755979638283977765604720811448344521635653024685713188763815498875814518372934997195741174355789193580782675302800740971637)
    Q2e = Point(2789707594071938247176856295054885672964671318346582893126623658345290888407188537155085983406594130861275443011557083866863527987104828970135343552263114*Fp2_i + 285084193881924555844560317332745200545128308659640887594114786954152153797180453762310646373883468777294969167386929314512930233691505898237623735534751, 2648295334653967223396375756748755979638283977765604720811448344521635653024685713188763815498875814518372934997195741174355789193580782675302800740971637*Fp2_i + 2874891559777922714417566635681304523006117233073085594957286168389801124903492606708461659036847866430276279414512640572247176520612956830389258101307936)
    M_i_2e = [0 14821387422376473014217086081112052205218558037201992197050570753012880593911807; 1 0]
    M_ij_2e = [14467086511204079788448501678875651370673402849430981676487366245874479730038838 13215382855198568475614798185218796103551496823596878572450203140842933336869875; 13215382855198568475614798185218796103551496823596878572450203140842933336869876 354300911172393225768584402236400834545155187771010520563204507138400863872970]
    M_1k_2e = [1606004567177904538602287895893256101667061213605113624600367612169947257041933 14467086511204079788448501678875651370673402849430981676487366245874479730038838; 14467086511204079788448501678875651370673402849430981676487366245874479730038838 13215382855198568475614798185218796103551496823596878572450203140842933336869876]
    M44inv
    P3 = Point(1843801754885035306531871974988815778451077219557963579181506586348334025307392967351891196071384814210724457516974884276922800939576138839027786775298688*Fp2_i + 3514431486035000120632271820370645136238260549187347425616658518055810905711808486309029254863546576963466235715701913661644329435772552303261964928275258, 316008353892253197392777372731598711371975567301692117434465177246826675647478781701802381070148061485254861819752208160251609872292384320000708883631348*Fp2_i + 45917060862535622351713889077199247390869505536086606606059569636003237034306955024941596420440762537073621826890424509872099758870752659866743142179559)
    Q3 = Point(306557521336242732986317688707933568950802148180099483286596099012622476030410784251695763046126173889998236190089427454511384150932369418419365259609081*Fp2_i + 2018926374675380519672906091861694376207609924803214572605187801774018598821660822354068312249246924452993386362715731422181968344542267920742934240669043, 1099866587371989023278580780540218319018667661816473068646689429283551607145451739800141495651120599059509074266178357887735672434447859432471392853709365*Fp2_i + 2565798053218040915088295584788038502091365402234845135801826232854366964135302114236349527105108966594581229149789641364412275348567114330433638494826196)
    M_i_3 = [203081000774671529679826381573346512147118352168054718048775279424643221986 169693199167814618307577278153051285635265773306454208952203471637373196469; 188976247896766477059949875952677549252716946262761485273787711987139253312 66640604815936033582280488833940341464820538016053329862494152040331251535]
    M_ij_3 = [76576592564456139549532903333701436611533250434364062117571908672072577059 68932266526522287050381224130372098283410270958586927278966858745840219983; 176706575698133337249700636819584127767375850350989115730310090948021310937 193145013026151423712573967073585417000405639749743985793697522792901896462]
    M_1k_3 = [74651840956410867371789823598182355298157287515251198063662395963110223333 63241012043971928641610463654187765454982968044600592820131998101609213378; 225441041900464595540338840510159371979359233374936442949145565451676621502 195069764634196695890317046809104498313781602668856849847607035501864250189]
    M3einv = [195069764634196695890317046809104498313781602668856849847607035501864250189 206480593546635634620496406753099088156955922139507455091137433363365260143 44280563690142967721768029897127481632579656809171604962123866013297852019 74651840956410867371789823598182355298157287515251198063662395963110223333; 193145013026151423712573967073585417000405639749743985793697522792901896462 200789339064085276211725646276914755328528619225521120632302572719134253538 93015029892474226012406233587702725844563039833118932180959340516953162584 76576592564456139549532903333701436611533250434364062117571908672072577059; 219793789944848312681346295501343214687887038884781454097637969384476405653 237892939475837519055292040514979764543493658794827693516999677319281717018 164436903499500197439451397686490706282034754439216746186832469908903368562 49927815645759250580760574905943638924051851299326593813631462080498067868; 149303681912821734743579647196364710596314575030502396127324791926220446665 126482024087943857283220927308375530909965936089201185640263996203218426756 181160478210321627818570810613031890346779576565764837987021699438378769483 120417923677785828518527223210922143015624315153605651783944639538754026856]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    window_size = 3
    gen = 1
    while gen^(BigInt(3)^(ExponentCofactor - 1)) == 1
        gen = rand(Fp2)^((p - 1) << ExponentFull)
    end
    base = gen
    fq_dlog_table1_c_3, fq_dlog_table2_c_3 = make_dlog_table_3(base, ExponentCofactor, window_size)
    strategy_dlog_c_3 = compute_strategy(div(ExponentCofactor, window_size)-1, window_size, 1)
    dlog_data_odd = DlogData(ExponentCofactor, window_size, fq_dlog_table1_c_3, fq_dlog_table2_c_3, strategy_dlog_c_3)
    
    gen = rand(Fp2)^((p - 1) * Cofactor)
    while gen^(BigInt(2)^(ExponentFull - 1)) == 1
        gen = rand(Fp2)^((p - 1) * Cofactor)
    end
    base = gen
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, ExponentFull, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base_res = gen
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base_res, ExponentFull, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentFull, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)
    
    DegreesOddTorsionBases = Tuple{Int, Int}[(3, 156)]
    OddTorsionBases = [[P3, Q3]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = Vector{Matrix{BigInt}}[[M_i_3, M_ij_3, M_1k_3]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, M3einv, w, isomorphism_to_A0, dlog_data_chall, dlog_data_res, dlog_data_odd))
end
