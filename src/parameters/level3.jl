include("level3/prime.jl")
include("level3/constants.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")

include("../elliptic_curves/dlog.jl")
include("../elliptic_curves/montgomery.jl")
include("../elliptic_curves/pairing.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d/sqisign2d.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForTorsion => compute_strategy(ExponentForTorsion-2, 2, 1)
)

function make_precomputed_values()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level3torsion.sage
    P2e = Point(89753488895907861158278234961738931161833320354463542734221489591766127279013873628798085936742501778221637220033924*Fp2_i + 6626706311827880741874015648236086300786306920463949403512890785215741713064886158321575547141375334780926461190513, 3731615929281798769064596124243010101309336756488730766383111117532134783330462399653791985122205498419048270018234*Fp2_i + 46642855337805569597429411666910006863410707530884117913099772535835466026311823697857410862708681923953881001655468)
    Q2e = Point(45606708769299528655494738701049621020576826530181004547526022299031580816928941211536566764234157329842715211733627*Fp2_i + 128733491353379509071898958014552465881623839964180597878234621105581966382877928682013077153835283773283425970577038, 46642855337805569597429411666910006863410707530884117913099772535835466026311823697857410862708681923953881001655468*Fp2_i + 131628581735925591044708377538545542081100810128155816515364400773265573312612352440680860715854453609645304161749317)
    M_i_2e = [0 25108406941546723055343157692830665664409421777856138051583; 1 0]
    M_ij_2e = [10885905755464419702354116803820852511359360660747653900414 23465086227821914975274850077176048348251527854119110464620; 23465086227821914975274850077176048348251527854119110464621 14222501186082303352989040889009813153050061117108484151170]
    M_1k_2e = [1643320713724808080068307615654617316157893923737027586964 10885905755464419702354116803820852511359360660747653900414; 10885905755464419702354116803820852511359360660747653900414 23465086227821914975274850077176048348251527854119110464621]
    M44inv
    P3 = Point(44295103579597736962358936416681822916958571414675861750034303221794342399844596291359259702266646365870439797027344*Fp2_i + 29682890187538032331285933257731868452189535078775453171801915796877769711227238497202161519932970716076502249478861, 1507174148531625265496730565062561922115097896043119650243291027184742160848961714413104977557563617686102638673722*Fp2_i + 83754941978717387738891661950649334376504814502097133835329331070563704958867333779432409545573051509436921152116541)
    Q3 = Point(113339110231766328891136552951567072956979946953775316815566550599400740072532862312033502439311232180221324323133011*Fp2_i + 5836642555703633365806056636941893609996844371599207460563829265718926089707512008650956475953480331981904275290899, 60236719276769745079186029661231083403747035695321469630351558271563720203092728327886379423999713318067526424830844*Fp2_i + 37792712195247682115848364706316966588894795050712556901269747676011808078250874274625157497782991679460083803722560)
    M_i_3 = [1737245107219129902239928151678818835497182556340269381958 587234511444591130170461103067306253289752639107557502601; 4614813550275649923820627544799693693666043438761104338019 3653785792524163728999611336849996283697244326273283937245]
    M_ij_3 = [177808278634155961346541962672075483587012461076034569327 1516158823655116166056035156725770751274577821002712083402; 3793808737481391366514021373765648295697062980011846998691 5213222621109137669892997525856739635607414421537518749876]
    M_1k_3 = [3736007231164171244033280108326770730393685303629867008492 4889347283819137327466064036586969787911144666520614778592; 3879742781102286549001141445393454759666611838969922205512 1655023668579122387206259380202044388800741578983686310712]
    M3einv = [1655023668579122387206259380202044388800741578983686310712 501683615924156303773475451941845331283282216092938540611 1511288118641007082238398043135360359527815043643631113691 3736007231164171244033280108326770730393685303629867008492; 5213222621109137669892997525856739635607414421537518749876 3874872076088177465183504331803044367919849061610841235801 1597222162261902264725518114763166823497363902601706320512 177808278634155961346541962672075483587012461076034569327; 4009402349792475651692695262194147250871269248425353075899 2445083135865641201941609210384235249259403002897866664203 2972803924687132809207415202731602897728082521262589659363 1381628549950817979546844226334667868323157634188200243304; 2080983562585048856827020728124726341592943724646180697780 4387663667894981023692588584645124456627862450427676237981 2368454662461279466762743402258094400138796795326291091821 3310047337158244774412518760404088777601483157967372621423]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)

    # precomputed values for discrete logarithm
    window_size = 3
    gen = 1
    while gen^(BigInt(3)^(ExponentCofactor - 1)) == 1
        gen = rand(Fp2)^((p - 1) << ExponentFull)
    end
    base = gen
    fq_dlog_table1_c_3, fq_dlog_table2_c_3 = make_dlog_table_3(base, ExponentCofactor, window_size)
    strategy_dlog_c_3 = compute_strategy(div(ExponentCofactor, window_size)-1, window_size, 1)
    dlog_data_odd = DlogData(ExponentCofactor, window_size, fq_dlog_table1_c_3, fq_dlog_table2_c_3, strategy_dlog_c_3)
    
    gen = rand(Fp2)^((p - 1) * Cofactor)
    while gen^(BigInt(2)^(ExponentFull - 1)) == 1
        gen = rand(Fp2)^((p - 1) * Cofactor)
    end
    base = gen
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, ExponentFull, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)
    base_res = gen
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base_res, ExponentFull, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentFull, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)
    
    DegreesOddTorsionBases = [(3,121)]
    OddTorsionBases = [[P3, Q3]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_3, M_ij_3, M_1k_3]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return GlobalData(Fp2, Fp2_i, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, DegreesOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv, Matrices_odd, M3einv, w, isomorphism_to_A0, dlog_data_chall, dlog_data_res, dlog_data_odd))
end
